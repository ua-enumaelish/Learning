{"version":3,"sources":["Galerry.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","args","nextImg","count","state","setState","prevImg","className","onClick","this","style","top","right","transform","cursor","left","img","React","Component","Image","image","props","src","alt","App","class","href","role","aria-pressed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAEqBA,E,YACnB,aAAqB,IAAD,mDAALC,EAAK,yBAALA,EAAK,uBAClB,iEAASA,MAMXC,QAAU,WACR,IAAIC,EAAQ,EAAKC,MAAMD,MAEV,KADbA,GAAS,KAEPA,EAAQ,GAEV,EAAKE,SAAS,CAACF,MAAOA,KAbJ,EAgBpBG,QAAU,WACR,IAAIH,EAAQ,EAAKC,MAAMD,OACvBA,GAAS,GACE,IACTA,EAAQ,GAEV,EAAKE,SAAS,CAACF,MAAOA,KApBtB,EAAKC,MAAQ,CACXD,MAAO,GAHS,E,sEA0BlB,OACA,yBAAKI,UAAU,SACb,0BAAMC,QAASC,KAAKP,QAClBK,UAAU,wDACVG,MAAO,CAACC,IAAI,MAAOC,MAAO,GAAIC,UAAW,qBAAsBC,OAAQ,aAEzE,0BACEN,QAASC,KAAKH,QACdC,UAAU,qEACVG,MAAO,CAACC,IAAI,MAAOI,KAAM,GAAIF,UAAW,qBAAsBC,OAAQ,aAExE,kBAAC,EAAD,CAAOE,IAAKP,KAAKL,MAAMD,a,GAtCQc,IAAMC,WA2CrCC,E,iLAEF,IAAIC,EAAQ,GACZ,OAAOX,KAAKY,MAAML,KAChB,QACEI,EAAQ,4EACR,MACF,KAAK,EACHA,EAAQ,wGACR,MACF,KAAK,EACHA,EAAQ,kFACR,MACF,KAAK,EACHA,EAAQ,8EACR,MACF,KAAK,EACHA,EAAQ,4EAGZ,OAAO,yBAAKE,IAAKF,EACLG,IAAI,QACJhB,UAAU,+B,GAtBNU,IAAMC,WC1CLM,E,iLAEjB,OACE,yBAAKjB,UAAU,aACb,yBAAKkB,MAAM,eACZ,yBAAKA,MAAM,cACV,uBAAGC,KAAK,gBAAgBD,MAAM,kCAAkCE,KAAK,SAASC,eAAa,QAA3F,SAEH,yBAAKH,MAAM,cACV,wBAAIA,MAAM,+BAAV,qBAIH,yBAAKA,MAAM,cAEN,yBAAKlB,UAAU,YACf,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACF,yBAAKA,UAAU,mB,GAlBUU,IAAMC,WCSnBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.69f2a0c5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Gallery extends React.Component{\r\n  constructor(...args){\r\n    super(...args);\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  nextImg = () => {\r\n    let count = this.state.count;\r\n    count += 1;\r\n    if(count === 4){\r\n      count = 0;      \r\n    }\r\n    this.setState({count: count})\r\n  }\r\n\r\n  prevImg = () => {\r\n    let count = this.state.count;\r\n    count -= 1;\r\n    if(count < 0){\r\n      count = 3;      \r\n    }    \r\n    this.setState({count: count});  \r\n  } \r\n\r\n  render(){\r\n    return(\r\n    <div className=\"col-8\">\r\n      <span onClick={this.nextImg} \r\n        className=\"position-absolute carousel-control-next-icon next-btn\" \r\n        style={{top:\"50%\", right: 25, transform: \"translate(0, -50%)\", cursor: \"pointer\"}}>\r\n      </span>\r\n      <span \r\n        onClick={this.prevImg} \r\n        className=\"position-absolute carousel-control-prev-icon align-middle prev-btn\" \r\n        style={{top:\"50%\", left: 25, transform: \"translate(0, -50%)\", cursor: \"pointer\"}}>\r\n      </span>\r\n      <Image img={this.state.count}/>\r\n    </div> )   \r\n  }\r\n}\r\n\r\nclass Image extends React.Component{\r\n  render () {\r\n    let image = '';\r\n    switch(this.props.img){ \r\n      default: \r\n        image = \"http://oboinastol.net/katalog_kartinok/tom20/018/skachat_oboi_960x540.jpg\";\r\n        break;\r\n      case 0:\r\n        image = \"https://million-wallpapers.ru/wallpapers/4/73/9929974507706928446/zakat-zabor-derevya-listva-osen.jpg\";\r\n        break;\r\n      case 1:\r\n        image = \"https://cdni.rt.com/russian/images/2018.10/article/5bc1d61f18356189348b45c5.jpg\";\r\n        break;\r\n      case 2:\r\n        image = \"https://www.wkbn.com/wp-content/uploads/sites/48/2019/06/obit-generic-2.jpg\";\r\n        break;\r\n      case 3:\r\n        image = \"http://oboinastol.net/katalog_kartinok/tom20/018/skachat_oboi_960x540.jpg\";\r\n        break;\r\n    }\r\n    return <img src={image} \r\n                alt=\"image\" \r\n                className=\"gallery__img img-fluid\">\r\n            </img>\r\n  }\r\n}","import React from 'react';\nimport Gallery from \"./Galerry\"\n\nexport default class App extends React.Component{\n  render(){\n    return(\n      <div className=\"container\">\n        <div class=\"row bg-dark\">\n\t\t\t    <div class=\"col-2 pt-3\">\n\t\t\t\t    <a href=\"../index.html\" class=\"btn btn-secondary btn-lg active\" role=\"button\" aria-pressed=\"true\">BACK</a>\t\n\t\t\t    </div>\n\t\t\t  <div class=\"col-8 pt-2\">\n\t\t\t\t  <h1 class=\"mb-4 text-light text-center\">\n\t\t\t\t\t  Gallery in React\n\t\t\t\t  </h1>\n\t\t\t  </div>\n\t\t\t<div class=\"offset-2\"></div>\n\t\t</div>\n        <div className=\"row pt-5\">\n        <div className=\"offset-2\"></div>\n          <Gallery/>\n        <div className=\"offset-2\"></div>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}